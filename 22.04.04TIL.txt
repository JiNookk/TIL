프로미스 객체
    동기와 비동기
        JS 런타임 환경에는 JS엔진이 항상 탑재되어있다.
        소스코드에서 동적으로 객체생성 >> 메모리 힙에 저장.
        함수를 호출하면 콜스택에 순차적으로 함수가 쌓인다.
        반환을하면 쌓인 함수가 하나ㅣㅆㄱ 사라진다.
        JS에서는 하나의 싱글 컨텍스트 스택을 이용한다. : 싱글 쓰레드
            >> 동기적 실행 : 앞에 오래걸리는 작업이 존재하면 뒤에 똥차밀림
        JS는 안좋은 언어인가?
            JS 자체는 동기적인 언어지만 JS 런타임 환경(Node, Browser)은 비동기적 API를 제공
            우리가 처리를 원하는 콜백함수를 비동기함수 API에 던져넣으면 task queue에서 알아서 내용을 처리해준다.

    timeout
    setTimeout함수를 활용해 비동기적으로 코딩을 진행할 수 있다.

    quiz
    에러 정의는 try - catch 문 밖에서 정의한다
    에러와 동작 정의함수를 만든 후 전역 스코프에서 try - catch문을 정의하자.
    try : 함수 동작
    catch : 에러 반환

    promise
    프로미스 객체 : 비동기 처리와 그 결과값이 끝났음을 알려주는 객체
    프로미스 상태 : pending, fulfilled, rejected
        pending : 이제 막 생성 되어서 성공 / 실패 가늠하기 전 단계
        fulfilled : 성공했을 때
        rejected : 실패했을 때

    프로미스 객체의 리턴
        프로미스 객체를 리턴받으면 .then .catch .finally를 사용할 수 있다.
        구조
            return new Promise((resolve, reject) => {resolve ~ reject~}
            resolve : 성공적으로 리턴했을 때 나오는 반환값
                then을 호출할 때 사용하는 함수
            reject : 실패했을 때 리턴되는 반환값
        프로미스 객체를 내장한 함수를 만들고 아래에서 func.then.catch~를 이용해 에러처리를 해준다.
        만약 프로미스 객체가 catch구문없이 에러가 발생하면 unhandledPromiseRejectionWarning 에러 발생
        catch안에 들어가는 콜백 : error => console.error(error)
            >> console.error로 축약시킬 수 있다.

    promise-egg
    프로미스 객체에서도 스태틱함수 존재
    reject, resolve ....
    프로미스객체는 네트워크 통신에서 유용하게 사용된다.
    네트워크 통신중에 프로미스 객체를 찍으면 >> 네트워크의 결과를 fulfill, reject, finally로 반환
    그것을 바탕으로 작업을 진행할 수있다.

    getChicken()
    .catch(() => '🐔')
    .then(fetchEgg)
    .then(fryEgg)
    .then(console.log);
        catch에 에러처리를 해주고 체이닝을 해도 프로그램이 종료되지 않고
        우리가 원하는 fetchEgg, fryEgg를 거쳐 console.log가 실행되는것을 볼 수 있다.

    promise-all
        만약 인자가 없는 함수가 선언되었는데 여러개의 아웃풋을 가져와야 한다면?
        then의 중첩을 이용해 접근해야한다.

        Promise.all([func1,func2...]).then.catch~
            함수를 병렬적로 실행한다.
        chaining : 비동기 함수를 직렬적으로 실행
        Promise.race([f1,f2 ...]).then.catch~
            함수 병렬 수행 + 가장 빨리 수행된 것 반환
        Promise.allSettled([func1,func2...]).then.catch~
            성공하든 실패하든결과를 배열로 묶어서 반환해준다.

    async
        async란?
            비동기적인 프로미스 객체를 동기적으로 변환
            >> then의 남용은 코드를 복잡하게 만든다.
                then 개수 = 콜백개수 >> 콜백 헬

        async - await 함수
            동기적으로 살짝 변환시켜주는 코드
            예문
                위에 함수는 다 짜여져 있는 상태 
                async function fetchFruits() {
                const banana = await getBanana();
                const apple = await getApple();
                return [banana, apple];
                }

    async - quiz
        퀴즈 다시 풀어볼 것!
        만약 체인을 이용한다면 마지막 chain이 리턴된다.

        정답
        async function makeFriedEgg() {
        let chicken;
        try {
            chicken = await getChicken();
        } catch {
            chicken = '🐔';
        }
        const egg = await fetchEgg(chicken);

        return fryEgg(egg);
        }

    JSON
        JSON이란? : JavaScript Object Notation : JS를 서버와 연결하기 편하게 만드는 텍스트 포맷
            프로미스와 함께 서버통신에 도움을 준다.
            오브젝트와 굉장히 유사하다.
            stringify(obj) : obj -> JSON
                == 직렬화
            parse(JSON) : JSON -> obj
                == 역직렬화

scope
    기술면접 단골주제 : prototype, scope, hoisting, closure
    scope: 범위
        식별자가 유효한 범위
        식별자 : 변수, 함수, 클래스 이름
        선언된 위치에 따라 유효범위 결정
        블럭{} 안의 변수는 블럭 안에서만 유효하다.
        블럭이 끝나면 블럭안의 변수는 메모리에서 제거
        >> 이러한 메커니즘으로 인해 이름 충돌을 방지하고 메모리를 절약할 수 있다.
        
    코드 블럭 : {}, if() {}, for () {}, function() {}
        블럭 외부에서는 블럭 내부의 변수를 참조할 수 없다.
        함수도 마찬가지이다.
        
    garbage collector : 자동 메모리 청소부
    C : 개발자가 직접 메모리 관리를 해야한다.
        메모리 관리 : 할당, 제거 

    gc의 필요성
        특정 객체의 주소를 할당한 후 null을 할당한다면?
        이제 객체 주소와 관련이없으므로 필요없는 메모리를 청소해야한다.
        gc가 처리했으니 안심하라구~~

    글로벌 변수는 앱이 종료될 때 까지 메모리에 유지된다.
    따라서 최대한 지역변수를 활용하자!

    hoisting
    실행 컨텍스트 : 콜스택의 메커니즘
        JS에서는 1개의 실행 컨텍스트 존재 (싱글스레드)

    스코프
        전역 스코프
        {
            블럭 1 스코프
            {
                블럭 2 스코프
            }
        }

    렉시컬 환경
        각각의 블록은 렉시컬 환경이라는 내부 객체를 가짐
        환경 레코드 + 외부환경 참조 레코드를 가지고 있음.
        스택에 쌓이는 순서 : 전역 스코프 렉시컬 환경 - 블럭 1 스코프 - 블럭 2 스코프
        전역의 외부환경 참조는 null, 블럭 1의 외부는 전역을 가리킨다.
        스코프 체인을 형성 : 스코프 체인이 가리키는 영역의 변수만 사용 가능

    호이스팅 : JS 엔진이 코드를 실행하기 전 변수, 함수, 클래스의 선언문을 끌어올리는 것을 말함.
        함수의 호이스팅은 함수의 선언문 전에 호출이 가능하게 해준다.

        단, 변수와 클래스는 선언만 호이스팅이 되고 초기화는 안된다.
        초기화(선언)전, 변수에 접근하면 컴파일(빌드)에러가 발생
        
        기존에 선언된 변수가 있다 해도 호출뒤에 새로 선언하면 에러가 발생한다.

    var
        var의 특징
        ㅄ임 절대 쓰지마셈
        var키워드 없이 변수선언, 할당이 가능하다.
        중복선언이 가능하다.
        블록 레벨 스코프가 안된다. (외부블록에서 내부블록 참조가능)
        함수 레벨 스코프는 가능

    strict
        엄격모드
        리액트와 같은 프레임워크 사용시 기본적으로 엄격모드이다.
        
        효과
            delete 사용 불가, var 무조건 선언하고 생성 가능
            for문에서도 var let const 지정하고 사용해야 한다.

prototype
프로토타입이란? : 원형
JS에서는 프로토타입을 객체지향프로그래밍을 위해 사용.
    여러 객체의 비슷한 점들을 비슷한 특징, 비슷한 상태를 묶어서 프로토 타입에 모은다.
    요새는 다들 클래스로 넘어가는 추세이다.
    왜 prototype? : JS 자체가 prototype을 기반으로 이루어져 있기 때문이다.

    콘솔창에 객체를 만들어 보면 Object란 이름을 가진 프로토타입을 볼수있다.
    객체간 상속을 위해 모든 객체는 내부에 숨겨진 [prototype]을 가진다.
    프로토타입은 외부에서 직접 접근이 불가능하고
    __proto__ 또는
    Object.getPrototypeOf() 또는
    Object.setPrototypeOf() 으로 접근할 수 있다.

    생성자 함수에서는 prototype으로 접근가능

    개발자도구로 보면
    모든 객체는 Object라는 하나의 프로토타입을 상속받고
    모든 배열은 Array라는 하나의 프로토타입을 상속받고
    Array는 Object를 상속하고 있다.