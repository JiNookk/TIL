Keyup, Keydown
    MDN 문서에 Deprecate로 되어있는 녀석들은 코드에서 제거할것!
    document에 대체할수 있는 코드를 제공한다!

    Keydown
        키가 눌려졌을때 발생하는 이벤트

    Keyup
        키가 떼졌을때 발생하는 이벤트

    event.isComposing
        글자가 만들어지는 중인 이벤트?
        ex) 한글 한글자한글자를 완성해야 이벤트가 끝남.
        isComposing이 false일때 return 처리를 하면 이벤트가 두번발생한다.
        한글을 사용할때는 무조건 isComposing을 true처리 해주어야 한다!!

form 태그
    http서버와 어떤 메소드(put or post)를 사용해서 통신을 실행하는 태그 
    js 처리를 안해도 엔터나 버튼을 클릭할때 submit이 된다!
    submit event를 통해서 이벤트리스너 등록 가능
        submit이 실행되면 브라우저가 새로고침 된다.
        event.preventDefault를 이용해서 새로고침을 막을 수 있다.
    MDN에서 form태그 문서 읽어보기

Object
    reference
        객체는 뚱뚱한 데이터 타입이기 때문에 메모리 주소가 이름에 저장되고 객체 내용은
        메모리 다른공간에 따로 저장된다. 메모리 주소를 reference라고 부른다.
        객체 이름 = 메모리 주소 = reference

        객체에 다른 객체를 할당하면 객체의 내용을 할당하는게 아닌 reference를 할당한다.
            >> 따라서 객체의 prop들을 접근해서 변경하면 같은 reference를 가리키는 모든 객체가 변한다.
            >> 클래스, 인스턴스를 이용해 원본을 보호해야 한다!
            >> 함수도 객체와 똑같다 
        
callback
    function add(){
       ~ 
    }

    function callback(operator){
        const result = operator(2,3)
    }
        
    callback(add)
        callback에 add의 reference 전달 > operator가 add의 reference를 가리킴 >> operator과 add가 같은 기능을 한다.

불리언
    애매한 불리언들
        truthy : []
        falshy : 선언만 된 변수(undefined) >> 할당안된 녀석

class
    단점 : 클래스 자체만으로 가져다 쓰면 사용자가 입맛대로 모듈화하기 힘들다.
        >> 콜백함수를 모듈처럼 가져다 붙이면서 재사용성을 높이면 good!
        >> 클래스 일체형 느낌보다는 콜백을 조립할 수 있게 둘이 잘 조합해서 쓰자
    
    예제
        class Counter {
        constructor(runEveryFiveTimes) {
            this.counter = 0;
            this.callback = runEveryFiveTimes;
        }
        
        increase() {
            this.counter++;
            console.log(this.counter);
            if (this.counter % 5 === 0) {
             콜백이 있으면 콜백 실행! 없으면 콜백 실행 x
               if (this.callback) {
                 this.callback(this.counter);
               }
               위 아래 같은 코드! >> 조건 축약을 잘 이용하자
            this.callback && this.callback(this.counter);
            }
        }
        }

        function alertNum(num) {
        alert(`alert${num}`);
        }


        클래스의 생성자에서 정의한 콜백함수로 alertNum 전달
        const coolCounter = new Counter(alertNum);


