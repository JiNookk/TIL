HTML MarkUp
    첫 묶음은 header를 사용한다.
    구역을 나누는건 무조건 섹션쓸것!
    특정 상황에서 발생하는 박스 >> 팝업으로 생각하고 기존화면밖에 배치해서 css로 조절한다!

CSS
    만약 요소가 부모크기보다 더 튀어 나왔으면 flex를 이용해서 크기를 맞출 수 있다.
    background
        center/cover쓰면 지정한 width, height에 맞춰서 지정된다!
            center / cover : center + cover 

    visibility
        display : none을 하면 render tree에 영향을 주기 때문에 사이즈가 변경된다
                이럴때는 visibility를 사용하면 시각효과를 편하게 줄 수 있다!
    
    flex로 컨테이너안에 요소가 정렬되어 있을때 margin을 이용해 영역의 크기를 조절할 수 있다.
        조절할 영역의 크기를 쉽게 확인할 수 있게 background color를 지정해놓고 작업하면 좋다.
    
    JS에서 classList로 부착할 녀석은 --로 이름붙이는게 편하다.

JavaScript
    strict모드 꼭 사용하도록 하자!!

    필요한 변수들, DOM 노드들 맨위에 싹다 선언해주고 시작하자!
        변수 선언시 대문자로 선언해주는게 좋다!
    
    on / off 토글이 필요하면 불리언을 변수로 선언하는게 좋다
        if(toggle){
            ~
        } else{
            ~
        }
        toggle = !toggle
        이런 방법으로 on / off 를 구현할 수 있다.

    코드를 짤 때 가능하면 전부 메서드화한다!
        그대신 비슷한 함수끼리 가깝게 배치한다.

    classList 사용시 기존 것 삭제해야하는지 꼭 체크하기

    clearInterval() 다른 함수에서도 접근가능한지 조사하자!

    분, 초를 동적으로 코딩한것 참고
        function updateTimerText(time) {
        const minutes = Math.floor(time / 60);
        const seconds = time % 60;
        
        gameTimer.innerText = `${minutes}:${seconds}`;
        }

    자식 element들을 편하게 삭제하는 법
        parent.innerHTML = ''

    Text만 넣으면 될때는 innerText를 이용하면 된다.

    함수의 인자와 반환값은 어떤것이든 들어올 수 있으므로 항상 인자로 어떤것을 받을지 고민해보기!
        2번 이상 쓴다? >> 무엇을 인자화 할 수 있을지 고민해보기!

    JS에서 CSS에 바로 접근하는 방법이 아주 쏠쏠쏠하다!
        element.style.~ = '~'
