연산자의 활용
    LOGICAL
        논리연산자
            && : AND
            || : OR
        단축평가
            IF문 밖에서 AND는 조건이 참일때 구문이 실행되고
                        OR은 조건이 거짓일때 구문이 실행되는 현상
            이를 활용해 간결한 코딩이 가능하다.
        
        &&
        let result = obj1 && obj2;
            obj1이 true라면 obj2를 반환한다.
            obj1이 false라면 undefined를 반환한다.
        ||
        let result = obj1 || obj2;
            obj1이 true라면 obj1를 반환한다.
            obj1이 false라면 obj2를 반환한다.
        활용방법
            조건이 truthy일때 && 우리가 원하는 동작
            조건이 falshy일때 || 우리가 원하는 동작

        null 또는 undefined인 경우를 확인할 때.
            const price = item && item.price;
            만약 item에 아무값도 없을 경우 : undefined할당(price에)

        default parameter : 함수의 인자부분에서 바로 할당을 하는 경우
            || 연산자를 사용하면 기본값을 설정할 수 있다!
            function print(message = 'Hi') {
            const text = message || 'Hello';
            console.log(text);
            }
            print('안녕!');
            print();
            print('');

    optinal
        옵셔널 체이닝 연산자
        ?.으로 사용한다
            ?. == && obj
        null 또는 undefined을 확인할때 사용한다.
        다중객체에서 논리 연산자를 이용한 단축평가를 활용할 때 
        .?를 활용하면 도움이 된다.
        예시
            let obj = { name: '🐶', owner: { name: '엘리' } };
            function printName(obj) {
            // 다중 객체에 접근할때는 순차적으로 옵셔널체이닝 연산을 해주어야 접근할 수 있다.
            const ownerName = obj?.owner?.name;
            console.log(ownerName);
            }

    nullish
        ??
        예기치 못한 falshy를 예방할 때 사용한다.
        let num = 0인 경우 0값을 할당했음에도 falshy로 간주한다.
        null, undefined만을 falshy로 두려면 || 대신 ??를 사용하면 된다

모듈
    주석
        // 주석 Comments
        // 한줄 짜리 주석을 작성할 떄 씀
        // TODO(엘리): 해야할 일을 작성
        // TODO(엘리): XX기능 구현하기

        /**
        * 주석은 코드 자체를 설명하는 것이 아니라,(제일 나쁜주석)
        * 왜(WHY)와 어떻게(HOW)를 설명하는것이 좋음(아키텍쳐를 설명할때)
        * (단, 정말 필요한 경우에만)
        */

        // 외부에서 많이 쓰이는 함수 API인 경우 JSDoc을 사용하면 좋음
        /**
        * 주어진 두 인자를 더한 값을 반환함
        * @param {*} a 숫자 1
        * @param {*} b 숫자 2
        * @returns a와 b를 더한값
        */
        function add(a, b) {
        return a + b;
        }
        [].map;

        // 공식 문서에 들어가서 어떻게 주석을 쓰는지 참고하면 아~주 저아연

    에러 처리
        우리가 원하지 않는 조건이 들어왔을때 에러를 우아하게 처리해주어야 한다.
        try - catch - finally 구문을 이용한다.
            try : 우리가 원하는 조건이 들어왔을 때 실행구문
            catch : 우리가 원하지 않는 조건이 들어왔을 때 에러처리
            finally : 어떤 조건이든간에 무조건 실행되어야 하는 구문

    에러 버블링
        만약 c - b - a 순서로 함수가 호출된다고 가정해보자
        a에서 오류가 발생한다면 catch로 에러처리를 해주어야 할 것이다.
        c,b 둘다 에러 캐치가 가능하다.
        단 b(하위계층)에서 캐치에 성공 했을 경우 c(상위계층)의 캐치구문은 작동하지 않음.

    모듈화
        왜 모듈화?
            js파일간에는 서로 변수를 수정할 수 있다.
            예기치 못한 버그를 막기위해 다른 파일에서의 접근을 부분적으로 허용해야한다.
            >> 모듈화(캡슐화)

            export
            우리가 원하는 함수나 변수 앞에만 export를 붙여 외부의 접근을 허용할 수 있다.
            단, 다른 js파일에서는 export한 이름 그대로 써야 한다.
            
            default
            딱 하나만 export할 경우에 사용한다.
            다른 js파일에서 임의의 이름을 사용해서 import가능하다.

            외부js 파일에서 export받은 파일을 이용해 변수를 리턴받을수는 있지만
            직접 접근할 수는 없다!

프로미스 객체
    callstack
        동기와 비동기
        동기란?
            JS런타임 환경에서는 JS엔진이 항상 탑재되어있다.
            소스코드에서 동적으로 객체를 생성하는 경우 메모리 힙에 저장
            함수를 호출하면 콜스택에 순차적으로 함수가 쌓인다.
            반환을하면 쌓인 함수가 하나씩 사라진다.
            JS에서는 하나의 싱글 컨텍스트 스택을 이용한다. : 싱글 쓰레드
            싱글쓰레드 : 동기적으로 진행된다.
            동기적 : 순서대로 실행된다 : 앞에 오래걸리는 일이 있으면 뒤에 똥차밀린다.
        
        그러면 JS는 안좋은 언어인가?
            JS 자체는 동기적인 언어지만 JS 런타임환경은 비동기적 API를 제공
            Node나 브라우저에서 비동기를 쓸 수 있다.
            우리가 원하는 콜백함수를 비동기함수 API에 던져 넣으면
            task queue에서 알아서 내용을 처리해준다.

    timeout
        비동기 함수인 setTimeout에 콜백함수를 넣으면 병렬적으로 n ms 뒤에
        원하는 콜백이 실행된다!