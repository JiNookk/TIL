Lifecycle 함수들 이용하기
    React docs 한번씩 읽어보기
        Composition vs Inheritance
            react는 Composition 훨씬 더 많이 사용함
        
        Lifecycle
            컴포넌트를 생성해서 브라우저에 표기가 될때, 브라우저와 통신하거나 타이머를 시작하거나 기능을 이용할 때 필요한 함수
            Component의 메서드임.
            componentDid~?
                Mount : UI가 등록이 되었을 때 호출이 된다.
            componentWill~? 
                Unmount : UI에서 지워지기 전에 호출이 된다.

Function 컴포넌트, memo정리
    생성 방법 : rsi + tab
    화살표 함수, 일반 함수 형태 둘다 간응
        const funcname = (props) => {}
        function funcname (props) {}
            기본 값 : () -> 단순 태그 하나를 가져올 때.
                    {} -> 여러 태그를 가져올 때
    장점 : this가 필요없다!! class가 아니닌깐
    memo : 함수형 컴포넌트에서 PureComponent역할을 하는 녀석

React Hook ( 매우 중요 )
    함수형 컴포넌트를 더 편하게 쓸 수 있는 방법.
    state를 사용하려면 useState를 사용하면 된다!   
        const [count, setCount] = useState(초기값)
        두개의 값을 리턴해줌. count와 count를 업데이트 할 수 있는 함수 setCount
        setState역할을 setCount으로 대체한다!

    class Component에서 만든 멤버변수(핸들러)들은 한번만 만들어지고 render함수만 반복적으로 호출
    function Component는 안의 모든내용이 반복해서 호출이 된다.
        결국 새로 호출된다? -> 새로운 객체로 생성된다는 말. -> 안에 있는 메서드(객체)들도 전부 새로 생성이 된다.
        근데 useState로 인해 초기화가 발생되지 않나?
        컴포넌트에 연결된 state는 따로 저장되어 있어서 영향을 받지 않는다.
    
    결국 우리가 원하는것? >> 성능 개선.
        불필요한 함수와 객체가 재생성되는걸 막자!
        >>> react hook을 써야 한다.

    useState : state를 한번 만들고 마는것

    useRef : 함수가 업데이트 될 때 마다 Ref를 생성하는 게 아닌 한번만 Ref를 생성하고 마는 함수!

    useCallback : event핸들러에 들어있는 콜백이 재생성되지 않도록 한번만 만들어줌!
        이벤트핸들러 선언시 콜백을 감싸주면 된다!
        const handleIncrement = useCallback (() => {
            ~~
        })

    useEffect : 컴포넌트가 마운트 되었을 때, 업데이트가 될 때마다 호출되는 아이이다.
            마운트? : UI에 등록이 되었을 때
            componentDidMount + componentDidUpdate를 합친 함수라고 생각하면 편하다!
            useEffect((callback),[updateTarget])
                target이 변경될 때마다 callback실행. 없으면 마운트, 업데이트 될때 호출
                target을 []로 주면 mount가 될때만 호출됨. target이 없으니깐

JS object가변성 (Spread Operator)
    오브젝트 할당
        변수에 오브젝트를 할당하면 변수에는 오브젝트의 주소(참조값)이 할당된다!
        const numObj = { num : 2 }
            numObj에는 메모리주소 값(ex : x123)이 들어있다.

        const a = { id: '1', count: 0 }
        const b = { id: '2', count: 0 }
        const c = b

        b.count = 1 로 바꿀수 있을까? (const인데?)
            간응. 왜냐하면 const b 는 메모리의 주소값을 가리키기 때문이다.
            데이터는 메모리의 주소에 영향을 주지 않는다. 하지만 새로운 오브젝트로 재할당은 불가능함. 메모리 주소가 다르니깐.
            