Lifecycle 함수들 이용하기
    React docs 한번씩 읽어보기
        Composition vs Inheritance
            react는 Composition 훨씬 더 많이 사용함
        
        Lifecycle
            컴포넌트를 생성해서 브라우저에 표기가 될때, 브라우저와 통신하거나 타이머를 시작하거나 기능을 이용할 때 필요한 함수
            Component의 메서드임.
            componentDid~?
                Mount : UI가 등록이 되었을 때 호출이 된다.
            componentWill~? 
                Unmount : UI에서 지워지기 전에 호출이 된다.

Function 컴포넌트, memo정리
    생성 방법 : rsi + tab
    화살표 함수, 일반 함수 형태 둘다 간응
        const funcname = (props) => {}
        function funcname (props) {}
            기본 값 : () -> 단순 태그 하나를 가져올 때.
                    {} -> 여러 태그를 가져올 때
    장점 : this가 필요없다!! class가 아니닌깐
    memo : 함수형 컴포넌트에서 PureComponent역할을 하는 녀석

React Hook ( 매우 중요 )
    함수형 컴포넌트를 더 편하게 쓸 수 있는 방법.
    state를 사용하려면 useState를 사용하면 된다!   
        const [count, setCount] = useState(초기값)
        두개의 값을 리턴해줌. count와 count를 업데이트 할 수 있는 함수 setCount
        setState역할을 setCount으로 대체한다!

    class Component에서 만든 멤버변수(핸들러)들은 한번만 만들어지고 render함수만 반복적으로 호출
    function Component는 안의 모든내용이 반복해서 호출이 된다.
        결국 새로 호출된다? -> 새로운 객체로 생성된다는 말. -> 안에 있는 메서드(객체)들도 전부 새로 생성이 된다.
        근데 useState로 인해 초기화가 발생되지 않나?
        컴포넌트에 연결된 state는 따로 저장되어 있어서 영향을 받지 않는다.
    
    결국 우리가 원하는것? >> 성능 개선.
        불필요한 함수와 객체가 재생성되는걸 막자!
        >>> react hook을 써야 한다.

    useState : state를 한번 만들고 마는것

    useRef : 함수가 업데이트 될 때 마다 Ref를 생성하는 게 아닌 한번만 Ref를 생성하고 마는 함수!

    useCallback : event핸들러에 들어있는 콜백이 재생성되지 않도록 한번만 만들어줌!
        이벤트핸들러 선언시 콜백을 감싸주면 된다!
        const handleIncrement = useCallback (() => {
            ~~
        })

    useEffect : 컴포넌트가 마운트 되었을 때, 업데이트가 될 때마다 호출되는 아이이다.
            마운트? : UI에 등록이 되었을 때
            componentDidMount + componentDidUpdate를 합친 함수라고 생각하면 편하다!
            useEffect((callback),[updateTarget])
                target이 변경될 때마다 callback실행. 없으면 마운트, 업데이트 될때 호출
                target을 []로 주면 mount가 될때만 호출됨. target이 없으니깐

JS object가변성 (Spread Operator)
    오브젝트 할당
        변수에 오브젝트를 할당하면 변수에는 오브젝트의 주소(참조값)이 할당된다!
        const numObj = { num : 2 }
            numObj에는 메모리주소 값(ex : x123)이 들어있다.

        const a = { id: '1', count: 0 }
        const b = { id: '2', count: 0 }
        const c = b

        b.count = 1 로 바꿀수 있을까? (const인데?)
            간응. 왜냐하면 const b 는 메모리의 주소값을 가리키기 때문이다.
            데이터는 메모리의 주소에 영향을 주지 않는다. 하지만 새로운 오브젝트로 재할당은 불가능함. 메모리 주소가 다르니깐.

    배열로 돌아가서 생각해보자.
        const array = [             //x567
            {id: '1', count : 0},   //x123
            {id: '2', count : 0},   //x234    
        ]
        const array2 = array;       //x567
        const array3 = [...array]   //x134

        스프레드 연산자를 활용하면 새로운 배열을 만들게 된다.
        하지만 완전히 새로운 배열은 아니고 내부의 객체들을 참조하는 배열을 가져온다.(shallow cloning)
        따라서 내부 객체의 데이터를 변경하면 그대로 똑같이 적용이 된다.
        하지만 내부 객체 자체를 추가하면 읽어내지 못한다! 기존의 객체만 참조했기 때문이다!
            >> 객체 추가, 삭제시 배열의 내용은 달라질 수 있다.
        
리액트 컴포넌트 종류와 훅에 대해서 개념 정리 노트
    컴포넌트?
        웹 앱에서 독립적이고 재사용이 가능한 단위로 나뉘어진 블럭
        최대한 독립적이고 재사용이 가능한 작은 단위로 만들면 좋다!
        함수형, 클래스형 두가지 존재
    
    클래스 컴포넌트
        React.Component 클래스를 상속받는다.
        UI표기를 담당하는 render()함수를 구현해주여야 한다.
        UI에 표기할 데이터가 있다면 this.state멤버 변수에 오브젝트 형태로 데이터를 저장할 수 있다.

        클래스이기 때문에 클래스의 인스턴스(객체)가 생성 되면 클래스의 메서드(함수)를 아무리 호출해도
        클래스의 멤버 변수를 직접 수정하지 않는 한 멤버변수는 변하지 않는다.

        아무리 render함수가 많이 호출되어도 this.state는 멤버변수이기 때문에 데이터를 유지할 수 있다.

왜 State 오브젝트를 수정하면 안되나?
    리액트 flow
        data 변경 -> UI 업데이트
        state 변경 -> render()호출(업데이트)

    state를 수정하는 방법
        1. 직접 접근해서 수정?(x)
            this.state.count++ >> 새로운 인스턴스를 만드는 것 같음. :: 멤버변수에 영향을 주지 못함.
        2. setState를 이용해서 수정(o)

    setState의 메커니즘
        현재 컴포넌트의 state (this.state)와 
        업데이트 해야 하는 새로운 상태 (setState함수의 인자로 전달된 새로운 오브젝트)를 비교해서 필요한 경우 업데이트 -> render함수 호출
        state를 비교하는 방식은 두가지 존재
            PureComponent : 두 가지를 얉게 비교한다(shallow comparison) -> 제일 상위 reference만 비교(가장 상위 객체의 메모리 주소)
            Component : setState가 호출 될 때마다 무조건 render 함수가 호출된다.
    
        비동기 API이다! 
            비동기? : 일단 실행 시켜놓고 뒤에 녀석바로 실행하는 녀석
            무조건 바로 render가 실행 되는게 아닌 setState뒤의 코드가 실행되고 동시다발적으로 요청된 여러가지의 setState를 효율적으로 처리 한 후에 render 발생

            state를 업데이트 할 때 이전 State값에서 무언가 계산이 되어지는 경우라면
            setState(updatedValue) 보다는 setState(prevState => newState) 
            이렇게 이전 state값을 받아서 그걸로 업데이트 되는 state값을 만드는 arrow함수를 전달할 수 있는 함수 호출을 하는게 좋다.
            

