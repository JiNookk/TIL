깃허브의 필요성
    이제 remote를 배워볼 차례이다.

오픈소스 프로젝트 참여하기
    fork - pull request - rebase - merge
    forking Workflow
        what is fork
        : 다른사람의 repository가 탐이 날 경우 나의 repository로 복사해 오는 것.

    pull request
        fork한 코드에 나의 것을 덧 붙여서 원작자에게 pull을 요청하는것
        승인 또는 거절을 당할 수 있다.
    
    rebase
        만약 pull request 도중 새로운 커밋이 원작자 repo에 업데이트 될 수 있다.
        최신 커밋으로 내 커밋을 rebase해야한다.

    merge
        rebase한 커밋을 merge한다.

깃헙 리포지토리 생성
    license관련 공부해보기
    setting에서 다양한 기능을 진행할 수 있다.
        이름변경, 삭제, 깃헙 페이지 배포등 다양한 기능 간응
        manage access를 누르면 협업할 다양한 개발자들을 초대할 수 있다.

깃헙 프로젝트를 내 pc에 가지고 오기
    download : 현재 서버 버전의 파일들을 내려받는다.
    clone : remote와 local을 연동하고 최신 커밋도 접근할 수 있다.
        clone 뒤에 추가로 폴더이름을 지정하면 지정이름으로 폴더가 생긴다.
    
    remote : 서버의 이름을 볼 수 있다.
        기본적으로 origin으로 설정되어있음.
        -v : remote가 어떤것들을 가리키고 있는지 확인할 수 있다.

        add servername serveraddress
            새로운 서버를 로컬에 연결한다. fork할 때 자주 쓸 예정임

        show (servername) : 서버에 관한 정보 출력

local to remote 
    origin/head가 가리키는 곳이 remote의 현재 마지막 커밋이다!
    local과 차이가 난다면 손질을 해줘야함
    git push로 커밋버전을 맞춰주자!

    push 
        remote와 local의 커밋이 서로 새로운 녀석을 가지고 있을경우 충돌이 발생한다. 이에대한 해결법을 제시한다.
        -f : local의 내용으로 밀어붙여서 커밋을 해버린다.

ssh key를 통해 손쉽게 검증된 사람이 될 수 있다.

local에 만들어진 프로젝트를 remote에 연동하기!
    remote 연동 > push
        git remote add origin address~~
        git push 