환경변수 설정
	export varname = varcontents
	이렇게 환경변수를 영구적으로 설정할 수 있다.
	환경변수를 사용할 때는 $varname으로 접근할 수 있다.

React 요소 정리
	reactDOM
		// react : 순수 자바스크립트를 이용해서 컴포넌트를 만들어 나감
		// 브라우저가 이해할 수 있는 녀석 : html, css, js
		// 아래 react 코드들은 바벨을 이용해서 다시 js로 변환 된다
		// 변환된 js를 html과 연결해주는 녀석 : react-dom

		// ReactDOM의 내부함수인 createRoot를 이용해서 root를 가져온다.
		const root = ReactDOM.createRoot(document.getElementById("root"));
		// root노드안에 App.jsx를 렌더링한다.
		root.render(
		<React.StrictMode>
			<App />
		</React.StrictMode>
		);
		// root.render 안의 내용이 html element로 변환되어서 브라우저에 전달된다!

	css
		/* css 작성도 전체적인 순서를 고려하며 작성하라!
		전체 포괄 내용 -> 컴포넌트 포괄 내용 -> 컴포넌트 요소 내용 -> html 요소 내용 */	

		.componentname으로 컴포넌트에 한번에 style을 할당할 수 있다.

		/* style 작성 순서 참고!
		배치 - font - width height - margin - color - border */

	jsx
		// jsx파일을 왜쓰는가 ?
		//   순수 js로직을 다루는 파일 >> js
		//   react의 컴포넌트파일 >> jsx
		//   이 둘을 구분하기 위해 사용!

		// 원래는 React.createElement('h1', {}, 'Hello:)!!') 이렇게 표현해야 했으나 편의성을 위해 jsx를 개발!
		
		// jsx와 html의 차이점
			//  attribute 주는 방법
			//   class => className, onclick => onClick
			//   camelCase를 사용한다!!
			//  html은 마크업 언어이지만 jsx는 js임 (babel로 변화된)
			// js코드 이므로 변수 사용가능. {}로 묶으면 됨.
			// 형제 노드(다수의 태그를 리턴)를 쓸 수 없음. >> 쓸꺼면 묶어서 써야됨. <React.Fragment>로 묶으면 됨.
		
		// jsx 특징
			// 의미없이 진짜 그룹만 묶을 거라면 <>로 묶어주면 된다.
			// {}를 이용하여 비즈니스 로직도 작성 가능 -> js처럼 쓸수 있다는 말
			// 접근에 오류가 있다면 {}부터 생각해보자!

	Component
		state + render파트로 구성
			state : 데이터 셋을 저장하는 공간 (보통 객체로 저장)
				setState를 이용해 업데이트한다.
				setState안에서는 = 대신 : 을 써야한다.
			render : state를 조작해서 원하는 UI를 표현하는 곳.
				state가 업데이트 되면 render도 업데이트!
				html처럼 태그를 사용해 브라우저에 요소들을 표시한다.
					class 대신 className, onclick대신 onClick을 사용한다.
					font awesome같은 친구들 수동으로 다 어트리뷰트 바꾸어 주어야 함.

		props vs state
			컴포넌트를 서로 엮어서 쓰면 굉장히 유용하다					
			props
				컴포넌트를 엮을 때 상위 컴포넌트에서 하위 컴포넌트에 전달하는 데이터.
				컴포넌트의 재사용성을 높임.
			state 
				컴포넌트 선언시 전달하는 데이터 꾸러미

			사용예제
				class Habits extends Component {
				state = {
					habits: [
					{ id: 1, name: "Reading", count: 0 },
					{ id: 2, name: "Running", count: 0 },
					{ id: 3, name: "Coding", count: 0 },
					],
				};
				//Habits 라는 컨테이너 컴포넌트를 만들었음.
				// render안에서는 habits들을 빙글빙글 돌면서 render에 있는 habit들과 연결시켜주었다.
				// map에서 habit이라는 state data들을 하나씩 전달하게 된다.
				//   객체에 아이디를 꼭 부여해야 한다!
				// 배열의 인덱스는 절대절대절대 쓰면 안된다!!!
				render() {
					return (
					<ul>
						{this.state.habits.map((habit) => (
						<Habit habit={habit} />
						))}
					</ul>
					);
				}
				}