fetch vs pull
    둘다 원격저장소에서 커밋을 가져온다!

    fetch 
        새로운 커밋을 가져오지만 head는 바뀌지않음. 기존커밋을 가리킴
        그냥 fetch하면 최신 커밋 전부를 가져온다.
        origin master : origin remote의 master 브랜치를 가져온다.

    pull
        새로운 커밋을 가져오면서 head도 최신 커밋을 가리킴
    
pull 심화과정
    만약 같은 파일에 대해서 local과 remote에서 동시에 다른 내용의 커밋이 발생하면 어떻게 될까?
        >> pull이나 push했을 때 merge conflict가 발생한다.
        >> mergetool을 이용해 병합을 처리해주어야 한다.
    
    해결과정    
        pull (기본적으로 merge임) - mergetool로 conflict처리 - merge --continue - push
        pull --rebase >> 뒷 내용은 같다.
    
오픈소스 프로젝트 참여방법
    fork - clone - commit - pull request
    
    fork : 오픈소스 프로젝트를 그대로 복사해서 나의 remote로 가져온다.

    clone : remote로 복사해온 프로젝트를 local로 가져온다.

    commit : remote로 수정해온 녀석들을 조져버린다.

    pull request : 원작자의 깃헙에 풀리퀘스트를 보낸다. 변경된 세세한 내용을 보내줘야 한다.

빠르게 디버깅하는 방법
    Git blame : 세세한 수정일자, 수정한 사람까지 볼수 있는 내역
    git lens extension을 쓰면 vscode에서도 blame을 볼 수 있다. (오른쪽 위에 귀여운 깃모양 아이콘)

문제의 원인을 빠르게 찾는 방법
    bisect
        기존에는 문제가 없다가 최근들어 문제가 생긴경우 사용한다!

    메커니즘
        문제가 없었던 커밋으로 가서 git bisect good 조진다.
        master branch로 가서 git bisect bad
        이 사이에 나쁜 커밋이 있다는 말임.
        그러면 사이 커밋을 계산해서 bisect로 계산을 진행한다.
        프로그램이 정상동작하는지 확인하고 정상이면
        git bisect good > bad 반복

tig
    git repository에 들어가서 tig라고 치면 UI로 내역을 살펴볼 수 있다. 
        엔터 : 살펴보기 
        q : 나가기

단축키 설정
    git reset --hard HEAD : 현재 작업중인 wd, sa 전부 초기화
        gh
    git stash save : 현재 작업중인 내용 stash에 저장
        gss
    git stash list : stash 에 있는 list를 살펴본다.
        gsl
    
    git commit -am "." : 빠르게 커밋을 해야할 때
        cad (git 붙여줘야함)
    git commit -am "~"
        git ca "~"

마지막
    커밋은 적당한 크기로! 한번의 하나의 내용만! > 1버그 1커밋, 1내용 1커밋
    출근하면 최신커밋 업데이트, 퇴근시 푸시