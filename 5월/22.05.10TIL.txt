커밋을 수정하기
    git commit --amend : 현재커밋을 수정한다. 커밋이름을 바꿀수도 있음. 바뀐내용을 커밋에 넣어줌.

reset
    커밋내용을 지우는 동작.(n단계 전으로 돌려놓는다.)
    옵션에 따라 지운 커밋의 내용을 wd or sa로 반환해준다!
    git reset HEAD~n (or hashcode)
    커밋은 지워져도 여전히 wd에는 남아있게 된다! (status창에 나오는 부분)
        restore로 wd 삭제 시킬 수 있다.
        하지만 untracked file들은 삭제 안됨!
            git clean -fd로 삭제!
    
    option
        --mixed : 커밋을 삭제하면서 wd로 내용을 가져온다! >> 기본값  
        --soft : 커밋을 삭제하면서 sa로 내용을 가져옴!
        --hard : 커밋을 삭제하면서 내용도 전부 삭제
            head를 hard로 reset할 경우 로컬에 있는 파일들을 전부 초기화 할 수 있다!
                이거 머선말이고?
            근데 무슨 내용을 가져오는건가?
        
삭제 이전으로 돌아가기!!!
    reflog
        우리가 커밋을 한 내역을 전부 보여준다! 해쉬코드를 이용해서 모든 내역에 접근할 수 있음.
        reset hard를 이용해 커밋에 접속할 수 있다.
            커밋이 되지 않았다면 못돌아가므로 커밋을 했는지 반드시 체크할 것!!

revert
    특정 커밋을 취소하고 그 내용을 새로운 커밋으로 반환할 수 있다.
    특정 커밋은 그대로 놔두기 때문에 원격저장소에 push 된 내용이라도 문제없이 사용할 수 있다.
    --no-commit : 바로 커밋을 진행하는 것이 아니라 staging area에서 변경되는 내용을 확인할 수 있게 해주는 옵션
    revert 커밋에서는 다른 기능을 추가하거나 버그를 고치면 절대절대 안된다!!!! revert만 할것!

rebase
    중간에 위치한 커밋을 수정하고 싶을 때 사용한다!
    주의점
        수정을 원하는 커밋 이후의 커밋들의 히스토리가 모두 변한다.
        수정할 커밋의 전 커밋을 rebase해야 한다.
    
    rebase -i hashcode
        뒤에 이어지는 녀석들까지 interactive 하게 rebase 한다!
        rebase 창이 뜨면 해쉬코드 앞의 문자를 바꿔서 원하는 동작을 수행할 수 있다.

중간에 있는 커밋 삭제(수정)
    rebase -> 수정 -> 힌트 보고 후속 조치. (여기서는 git add .을 진행) -> git rebase --continue

거대한 커밋 분할하기
    dependency를 사용할때는 하나의 기능당 하나의 커밋을 사용해야 한다!
    1 커밋 = 1 기능
    rebase > 분할할 친구 edit > reset HEAD~ : reset(--mixed)로 커밋를 뿌사버린다 > status창 보면서 각각 분할한 후 커밋! > rebase --continue
