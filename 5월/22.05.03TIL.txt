Git과 Github는 무엇일까
    VCS(Version Control System)중 하나임.
    DVC(Distributed Version Control)
        분산되어있기 때문에 하나의 유저가 데이터를 손실해도 복구할 수 있다.

    각각의 스냅샷으로 버전이 저장된다.
        따라서 예전버전으로 손쉽게 돌아갈 수 있따.
        링크로 저장되기 때문에 굉장히 가볍다.

효율적으로 듣는법
    꼼꼼하게 들어보면서 동작원리를 이해하고 개념을 정리하고 실습을 진행한다.
    겉핥기 식으로 알면서 다 이해한다고 생각하는 사람이 굉장히 많다.
    미리미리 써보고 준비하자!

Unix Terminal 명령어 정리 : 배쉬, bourne shell, fish, zsh ...
    배워두면 Linux, Mac OS, Windows, Cygwin등등 다른 터미널에서도 손쉽게 터미널사용 가능
    윈도우에서도 Linux쓸수 있다! >> 귀찮으면 PowerShell

명령어
    man
        매뉴얼
    clear
        터미널 초기화
    pwd
        현재 경로를 출력
    ls
        현재 디렉토리안의 폴더, 파일을 볼 수 있다.
        ls folder : 현재 디렉토리의 폴더 안의 파일 내역을 본다.
        -l : 파일의 세부정보까지 모두 파악가능하다!
        -a : 숨겨져있는 파일, 디렉토리 확인 가능
        -la : l, a 둘다
    open . : 터미널에 있는 현재 경로를 파일 탐색기로 연다.
        bash에서는 explorer . 으로 사용!

    cd 
        - : 이동하기 전으로 이동한다!
        ~ : 홈 디렉토리로 이동

    find
        현재 있는 경로를 포함한 하위 디렉토리에서 파일을 찾고싶다
    사용법
        find . -type file -name "*.json" 
            타입이 파일이고 ~.json이라는 이름을 가진 녀석을 찾는다. >> 경로를 반환한다.
        
    which
        실행하려는 프로그램이 어디에 설치되었는지, 어디에 설정되었는지 확인

    touch
        새로운 파일 생성
        기존 파일을 touch하면 수정날짜 업데이트 됨.
    
    cat
        파일의 컨텐츠를 바로 확인

    echo
        문자열을 리턴한다.
        echo 'string' > filename
            string을 넣은 새파일을 생성한다.
            만약 기존파일에 실행할 경우 파일을 덮어쓴다.
            >>를 쓸 경우 내용을 추가한다.

    mkdir
        새로운 폴더를 만든다
        -p를 한뒤 경로를 쭉 적으면 쉽게 여러 경로를 거치는 폴더를 만들 수 있다.
    
    cp
        복사
        cp file Dir
            dir에 파일을 복붙
    
    mv
        이동 또는 파일이름 변경
        mv file dir
            dir에 파일을 이동
    
    rm
        삭제
            rm file
            파일 삭제
        
        -rf : 숨겨진 파일 삭제
    
    grep(global regular expression print)
        키워드 중심의 검색을 할때 특정 키워드가 어느 위치에 있는지 확인 가능
        grep "world" * txt
        파일이름  : 해당내용이 출력
        -n 붙이면 
            n번째 줄까지 출력

환경변수 설정
    환경변수는 컴퓨터에서 특정 키워드가 어떤일을 하거나 경로를 저장할 수 있도록 만든다.
    
    export MY_DIR="dir1"
    
    env
        환경변수 목록을 확인할 수 있다.
    
    cd $MY_DIR을 하면 dir1으로 바로 이동한다!
    
    unset
        환경변수 제거
    
Vim
    vim file : 원하는 파일을 만듬

    사용법
        i
            insert mode : 수정모드
        esc
            수정모드 나가기
        :wq
            w : 수정한거 저장해라
            q : 나가라
            q! : 저장없이 강제종료
    
사용자 설정 및 필요한 세팅들
    환경설정(git config) 확인
        git config --list

        git config --global -e
        파일로 환경설정을 확인할 때
        
    git config 명령어
        code .
            vscode열기

        --global core.editor "code"
        --global -e
            vscode로 git config 파일을 열기
        
        --global core.editor "code --wait"
        --global -e
            vscode로 git config 파일 열고 파일 닫힐때 까지 대기

        --global core.autocrlf true(맥은 input)
            window와 맥에서 줄바꿈시 처리가 다름. 이걸 자동으로 보정해줌
            window : \r(캐리지 리턴) \n(line feed)
            mac : \n 
            깃에 저장할 때는 carriage return을 삭제하게 되고 git 에서 window로 불러올때는 추가해줌
            mac에서는 받아와서 저장할때 캐리지 리턴을 삭제한다.

            캐리지 리턴 : 문자의 새 줄을 시작하는데 쓰이는 제어문자.( 맨앞으로 이동하라 )

깃을 공부하는 포인트
    git + 명령어의 구조
    어떨 때 쓰면 좋은지 알려줌
    어떤 명령어를 붙이면 좋은지를 알려줌.
    깃 공식 레퍼런스에 모든 명령어들이 존재한다.

깃 초기화 하고 삭제하기
    git init
        초기화

    rm -rf .git
        깃 삭제
    
    git status
        깃의 상태를 볼수 있는 명령어
        치기 귀찮으면 설정할 수 있음.

        --global alias.st status
        이제 git st만 해도 status가 출력된다.
    
    git의 명령어 속성 확인방법
        git config --h

git의 WorkFlow
    working directory - staging area - .git directory - remote server
    
    working directory : 우리가 파일들을 수정하고 작업하는 공간
        untracked / tracked 으로 나눠짐
        tracked
            git이 이미 트래킹하고 있는 파일
            unmodified / modified
                이 시점에 수정이 되었는지 아닌지 ( 이전 버전에 비해서 )
                modified 파일들만 staging area로 등록된다.
        untracked
            새로 만들어진 파일이거나 기존 존재하던 프로젝트를 초기화할 때


    staging area : 어느정도 수정 한 후 파일들을 히스토리에 저장할 준비를 하는 공간

    .git directory : 버전의 히스토리를 가지고 있는 공간

    remote server : 우리의 데이터가 휘발되지 않도록 저장하는 원격 저장소

    remote server와 .git directory가 서로 push, pull을 하면서 버전정보를 주고받는다.

    각각의 커밋에는 스냅샷(버전정보)을 기반으로 고유한 해쉬코드가 부과된다.
        어떤 버전인지, 관련 메시지, 누가 썼는지, 언제 썼는지

add
    untracked파일들을 staging area로 올린다

    git rm --cached ~ : staging area -> working directory로 돌린다.

    * , . : 전체 선택

    staging area에 올려놓고 삭제하면 status에서 내역을 확인할수 있다. 

ignore
    git, github에 올리고 싶지 않는 아이들을 지정
    echo *.log > .gitignore
        .log로 끝나는 녀석들을 git에 올리지 않을 것

status  
    long : default

    -s : 간단하게
        숙련되면 이걸로 쓰자!

    -b : 브랜치 

diff
    어떤 파일의 내용이 수정되었는지 확인

    a/이전버전 b/현재버전을 비교

    -1 : 이번파일의 첫번째줄

    +1, 2 : 현재파일의 첫번쨰 줄에서 두번쨰 줄까지 확인하라!

    working directory에 있는 녀석들만 확인 가능

    --staged를 붙이면 staging area에 있는 녀석들도 확인할 수 있다.
    --cached == --staged

git config에 해당내용 작성
    [difftool "vscode"]
	cmd = code --wait --diff $LOCAL $REMOTE
        vscode의 명령어는 code 다음에 터미널에서 기다리고 diff를 이용하고 LOCAL과 REMOTE를 비교한다

    이제 터미널에서 git difftool을 이용하면 vscode에서도 git status를 볼 수 있다.

commit
    버전을 만드는 작업
    -a : 현재 디렉토리에 있는 거 전부다 commit (staging area 없어도 됨)
    -m : 메시지 기입 옵션

commit 팁
    최대한 의미있고 작은 이름 단위로 커밋하는것이 좋다.
        나중에 취소하기도 편하고 관리하기도 좋기 떄문이다.
        커밋 메시지에 맞게 딱 그내용만 커밋해야함. 다른사람이 볼 때 혼동이 오기 때문이다.

UI에서 커밋할때 장점
    여러 변화내용중에서 원하는 줄만 커밋할 수 있다.

파일 변경시 유용한 팁 
    rm을 이용해서 파일을 삭제하면 staging area에 포함 안됨.
    이것을 커밋하기 위해서는 c.txt를 git add를 이용해 추가해 주어야 함.
    
    또는 git rm을 이용하면 알아서 staging area에 포함된다.

    mv로 파일 이름 변경시 똑같다. git mv를 이용하면 알아서 staging area포함

버전들 목록 보기 log 
    git log 
    버전별로 저자, 업데이트 날짜, commit ID를 볼 수 있다.
        위쪽 일수록 최신의 커밋!

    -p : 수정된 내용 확인 가능

    --oneline : 간단하게 한줄로 변경사항 파악가능
        해쉬아이디만 간단하게 표시
        --reverse를 붙이면 

    HEAD와 MASTER
        a - b - c - d 순서로 커밋을 하게 되면
        d -> c -> b -> a 이렇게 포인터가 가리키게 된다.
        커밋을 해나가는 기본 줄기 : master branch
        head : 현재 내가 바라보는 시점의 버전을 가리킴
            이제 막 커밋을 했다면 head는 d를 가리킨다.
            head~n : n단계 이전버전을 가리킴

    checkout
        git checkout hashcode
            해당 시점의 head를 가리킴

로그 이쁘게 만들기
    --pretty를 이용해서 예쁘게 포맷팅할 수 있다.
        git log --pretty=oneline
        git log --pretty="%h %an"
        git log --pretty="%h %an %ar %s"
        이런식으로 가능
    
    깃 홈페이지에 더 다양한 옵션을 확인할 수 있다.

    만약 fix라는 브랜치로 checkout하게 되면 log를 확인하기 힘듦!
        >> git log --oneline --graph --all 을 사용하면 브랜치 그림으로 확인할 수 있다.

    포맷을 커스터마이징 하면 이쁘게 쓸 수 있음!
    하지만 너무 길어지면 ㅈ같음
        그래서 alias를 이용한다!
    
        git config alias.hist ~~로 사용 가능

로그 심화 내용
    로그를 잘써야 고수가 될 수 있다.

    테크닉
        log
            -n : 마지막 n개만 볼것임!
            --author="name" : 작성자가 name인것만 가져온다
            --before="date" : 작성일자가 date 이전인 것만 가져온다.
            --grep="content" : content 키워드가 있는 놈들만 가져온다.
            file : 해당 파일만 로그를 볼 수 있다.
            git log HEAD = git log 
            git log HEAD~1 = 가장 최신꺼 제외한 모든 로그
            git show hashcode : 특정 커밋만 보고싶을 때
                hashcode:filename : 특정 파일 내용만 보고 싶을 때

        git diff
            hashcode1 hashcode2
            두개의 커밋을 비교한다!

소스트리로 로그보기
    history 목록을 보자!