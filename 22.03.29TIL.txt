변수
    변수란 : 자료를 저장할 수 있는 이름이 주어진 기억 장소
        let a (재할당, 변경 가능 변수 let)
        a라는 변수는 메모리 어딘가에 저장되어 있다.
        a는 저장된 메모리 주소를 가리킴

    변수 이름 짓기 : 이 변수에 어떤 값이 들어있는가? 생각해보기
        camelCase : 두개 이상의 단어가 이어지면 대문자로 잇기
        쓰면 안되는것 : 예약어, 숫자시작 , 특수문자 (_, $제외), 
                        이모지, 여러개 변수를 1,2,3으로 나누기
        연관된 단어가 있다면 앞단어를 비슷하게 해놓으면 편함.
        ex) audioBackground, audioWind

    데이터 타입
        원시 : number, string, boolean, null, undefined
        객체 : object, 원시 제외 전부

    숫자형 변수
        JS에서는 int double 구분 없이 모두 number
        만약 엄청나게 큰 수를 나타내려면 끝에 n을 붙이면 된다.

    문자형 변수
        '' 안에 데이터를 넣으며 ``안에 넣어도 가능.
        '~' + 변수 + '~' 이런 식으로 이어서 쓸수 있다.
        템플릿 리터럴
            작은 따옴표로 잇기 귀찮을 때 간편하게 변수 대입 가능 
            `~ ${변수} ~`
        MDN에서 내용을 확인할 수 있다.

    불리언
        어떤 데이터든 !!을 앞에 붙이면 불리언 타입 확인 가능
        Falshy 
        - 0, -0, '', null, undefined, NaN
        Truthy
        - 1, -1, 'text', {}, [], Infinity, 'false'도 포함임!!!

    null 과 undefined
        null : 개발자가 의도적으로 빈 값을 넣은 상태
        undefined : 아예 건드리지 않은 방치의 상태

    object
        객체는 {key : value}의 형태로 데이터를 저장할 수 있다.
        value 값에는 원시타입, 객체타입 모두 들어올 수 있다.
            원시 : data와 stack영역에 메모리주소 저장
            객체 : heap 영역에 메모리주소 저장
                heap영역에서는 데이터 사이즈가 동적으로 조절된다.
                셀 여러개에 걸쳐서 데이터가 저장된다.
                객체의 이름은 객체의 첫주소를 가리킨다.

    참조(reference)
        원시타입 : 다른 변수에 기존 변수를 할당해도 기존변수에
                    영향을 주지 않는다.
        객체타입 : 다른 변수에 기존 변수를 할당하면 다른 변수를
                    변화시키면 기존변수에 영향을 준다.
            객체는 메모리 주소를 참조하는 포인터이기 때문이다.

    상수형 변수 (const) 
        let : 재할당이 가능한 변수, 객체 value도 변경가능
        const : 재할당이 불가능한 변수. 하지만 객체의 value값은 변경 가능       
            왜냐면 객체의 첫 주소만 const로 지정 되어서
            객체의 value의 주소는 영향을 주지 못한다.    

    typeof
        컴파일러가 있는 언어 : 타입을 먼저 선언해주어야 한다.(정적)
        인터프리터 언어 : 타입이 값에 따라 알아서 결정 (동적) : JS
        typeof : 데이터 타입을 확인할 수 있다.
        js : dynamic, weakly typed, programming language


연산자 (operator)
    표현식 (expression)
        리터럴 : 코드에서 값을 나타내는 표기법
        ex) 123, '123', true, {}, [], ` ${} `
        표현식(expression) : 값으로 평가 될 수 있는 문(statement)
            let b : 선언문, 표현식 x, b = 2 : 표현식, 할당문
            다른 문자에 변수를 할당해보면 표현식인지 아닌지 확인 가능

    사칙연산
        % : 나머지값
        ** : 거듭제곱(es7부터)
        숫자와 문자열을 더하면 문자열로 변환된다.

    단항 연산자(unary)
        종류 : +(양), -(음), !(부정)
        숫자화
            모든 종류의 데이터에 +를 붙여보면 숫자가 된다.
        불리언화
            모든 종류의 데이터에 부정을 하면 반대 불리언이 된다.
            !!를 하면 원래 의미의 불리언이 된다.

    할당 연산자(assignment)
        a += 2 : a = a + 2;
        나머지 다 똒같음.

    증감 연산자(increment)
        a ++ >> a와 관련된 행위를 한뒤 a = a + 1
        ++ a >> a = a + 1 을 한뒤 연산 진행

    equality
        == : 값만 같으면 true 아니면 false
        === : 값과 데이터 타입이 같이면 true 아니면 false
        객체의 비교
            내용이 같은 obj1, obj2를 비교해보자.
            obj1 == , === obj2 : 둘다 false 
                메모리 주소값이 다르므로 false
            obj1.name ==, === obj2.name : true
                내용이 같으므로 true를 반환한다.

제어문
조건문
    if (불리언) {실행 내용} else if ~ else~

삼항연산자 (ternary)
    불리언 ? 참일때 실행내용 : 거짓일때 실행내용
    매우 간결하다.

스위치문 (switch)
    정해진 범위 안의 값에 대해 특정한 일을 해야하는 경우
    switch( 변수 ) {
        case ~
            변수 2 ~
            break;
        case ~
            ~~
    }

for 문
    똑같다.
    continue : 이번턴만 아래내용 스킵하고 반복문 킵고잉
    break : 반복문 탈출

While문
    do ~ while : 한번 ~ 내용 무조건 실행하고 while문 돌리라

논리기호
    && : and
    || : or
    ! : 부정 (불리언)
    !! : 불리언값으로 변환

+git
    git init
        으로 현재 디렉토리에 깃을시작
    git add 파일이름
        로 파일들을 커밋대기상태로 변경
    git commit "업데이트 요약"
        으로 파일들을 커밋함.
    git branch -M main
        으로 메인브랜치를 만들어줌.
    git remote add origin 깃주소
        로 원격저장소와 연결시킴
    git push -u origin main
        으로 푸쉬하면 작업 끗!
        