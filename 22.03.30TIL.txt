함수
    기본
        함수안에 작은 단위의 일을 묶어야 한다.
        함수와 매개변수의 이름을 의미있게 지어야 한다.
        함수도 객체이다. 따라서 함수이름은 함수의 메모리 첫주소를 가리키는 포인터이다.
        함수를 이용하면 재사용성이 크게 올라간다.
        함수의 리턴값에 객체, 템플릿 리터럴 등등 모든 종류의 데이터를 넣을 수 있다.
        
    메모리 주소
        function add ~
        const sum = add;
        sum과 add는 모두 함수 add의 메모리 주소를 가리킨다.

    리턴값
        리턴을 명시적으로 하지 않으면 자동으로 undefined가 반환된다.
        함수가 리턴을 만나면 함수가 종료된다.
        조건문과 리턴을 이용해 조건이 맞지 않은 부분을 종료처리 할 수 있다.

    매개변수
        매개변수의 기본값은 무조건 undefined(아무것도 전달하지 않을 때)
        argument의 정보를 확인하고 싶다면 arguments를 console.log로 찍어보면 된다.
        rest Parameters
        우리가 몇개의 인자를 받을지 불확실 할 때 나머지 인자를 ...param으로 받을 수 있다.

    표현식
        선언문 : function name () {}
        표현식 : const name = function () {}
            name에 함수의 메모리 주소가 저장된다.
            함수의 이름이 없으므로 익명함수이다.
            화살표 함수 : 표현식을 간략화 하여 사용할 수 있다.
                변수 이름 = (인자) => {함수 내용}
                함수내용이 리턴뿐인 경우 {} 생략 가능하다.
            IIFE
                (function name (){
                    ~~
                })()
                함수를 선언하자마자 사용하고 싶은 경우

    콜백함수
        일급객체 (함수)
            다음의 대상을 이용하여 모든 연산이 가능하다.
            함수의 매개변수로 전달
            함수의 반환값
            할당 명령문
            동일 비교대상
        고차함수
            인자로 함수를 받거나(콜백함수)
            함수를 반환하는 함수
        콜백함수
            const add = (a, b) => a + b;
            function name(a, b, callback){
                callback = ~~~
            }
            name(c, d, add)
            이런식으로 다른함수의 자리를 placeholder처럼 대기하고 있는 함수를 콜백함수라고 한다.
            콜백자리에 다른 함수를 쓰면 다른함수 역할을 한다.
            콜백자리에 선언된 함수 이외에 화살표함수를 바로 넣어도 된다.

    불변성 (immutability)
        객체를 다룰 때 원본 객체를 변경시키면 안된다!
        연관된 모든 내용이 영향을 받기 때문이다.
        ex) 함수 내부에서 외부의 변수를 바꾸는 행위, 함수 내부에서 객체의 값 변경
        변경하려면?
            function changeName(obj){
                return {...obj, name : 'Bob'}
            }
            이렇게 선언을 하면 새로운 객체를 만들어서 수정하게 된다.
            또한 함수 이름에 객체를 변경하는 티를 내주어야 한다.

객체
    객체
        왜쓰는가?
            서로 연관있는 속성(데이터 프로퍼티)과 행동(함수 - 메소드)를 한곳에 묶기 위해 사용
            밀접하게 관련있는 상태와 행동을 객체로 묶어야 하겠군
        객체 리터럴 : {key : value}
        new Object()
        Object.create()
        key : 문자, 숫자, 문자열, 심볼 들어갈 수 있음
            문자열을 키값으로 쓸경우 특수문자를 넣을수 있지만 굳이 쓰지 말기.
        value : 원시값, 객체(함수) 들어갈 수 있음.
        속성, 데이터에 접근하는 방법
            마침표 표기법 : .으로 접근
            대괄호 표기법 : []으로 접근
                얘는 언제쓰는거지? : 동적으로 속성에 접근하고 싶을 때
        속성 추가, 삭제
            추가 : obj.att = '내용'
            삭제 : delete obj.att

    compute
        객체를 선언한 시점에 정적으로 접근이 확정된다.
        동적으로 속성에 접근하려면 대괄호 표기법 사용!
            콜백함수와 마찬가지로 사용이 가능하다.
            선언 후 원하는 속성의 키를 넣으면 동적으로 밸류가 나온다.
            function addKey(obj, key, value) {
            obj[key] = value;
            }

            addKey(obj, 'job', 'engineer');
            console.log(obj);
                이런 식으로 객체에 새로운 값도 넣을 수 있다.
            
            function deleteKey(obj, key) {
            delete obj[key];
            }

            deleteKey(obj, 'job');
            console.log(obj);
                이런 식으로 동적 삭제 가능.

    축약형 (short)
        객체 선언시 이름이 똑같은 key value쌍은 축약할 수 있다.
        { x, y } = { x : x, y : y }
        함수에서도 객체를 반환할 때 같은 방법으로 축약할 수 있다.
        function makeObj(name, age) {
        return {
            name,
            age,
        };
        }

    method
        객체 안에 메서드를 집어 넣을때 만약 객체의 속성에 접근하고 싶다면
        this.att로 접근할 수 있다.

    생성자 (create)
        특정한 템플릿(규격)을 이용해 새 객체를 손쉽게 찍어내는 도구
        함수의 이름 첫글자를 대문자로 하면 생성자가 된다.
        원래 this를 반환해야 새로운 객체가 나오지만 관습적으로 생략한다.
        ex)function Fruit(name, emoji) {
            this.name = name;
            this.emoji = emoji;
            this.display = () => {
                console.log(`${this.name}: ${this.emoji}`);
            };
            // return this; // 생략가능
            }
        
        const apple = new Fruit ('apple', '🍎')
        이러면 {{name : 'apple'}, {emoji : '🍎'}, {display = () ~} }
        라는 객체가 완성된다.


